---
import { type CollectionEntry, getCollection, render } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import BackToPrevious from "@components/BackToPrevious.astro";
import Link from "@components/Link.astro";
import PostNavigation from "@components/PostNavigation.astro";

export async function getStaticPaths() {
  const projects = (await getCollection("projects"))
    .filter((project) => !project.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return projects.map((project) => ({
    params: { id: project.id },
    props: project,
  }));
}
type Props = CollectionEntry<"projects">;

const projects = (await getCollection("projects"))
  .filter((project) => !project.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

function getNextProject() {
  let postIndex;
  for (const project of projects) {
    if (project.id === Astro.params.id) {
      postIndex = projects.indexOf(project);
      return projects[postIndex - 1];
    }
  }
}

function getPrevProject() {
  let postIndex;
  for (const project of projects) {
    if (project.id === Astro.params.id) {
      postIndex = projects.indexOf(project);
      return projects[postIndex + 1];
    }
  }
}

const nextProject = getNextProject();
const prevProject = getPrevProject();

const project = Astro.props;
const { Content } = await render(project);
---

<Layout title={project.data.title} description={project.data.description}>
  <Container>
    <div class="animate">
      <BackToPrevious href="/projects">Back to projects</BackToPrevious>
    </div>
    <div class="animate my-10 space-y-1">
      <h1 class="text-3xl font-semibold text-black dark:text-white">
        {project.data.title}
      </h1>
      <div class="flex items-center gap-1.5">
        <div class="font-base text-sm">
          <strong>Release date: </strong><FormattedDate
            date={project.data.date}
          />
        </div>
      </div>
      {
        project.data.downloadUrl && (
          <nav class="flex gap-1">
            <strong>Get it on </strong>
            {project.data.downloadUrl.map((download) => (
              <Link href={download.url} external>
                {download.label}
              </Link>
            ))}
          </nav>
        )
      }
    </div>
    <article class="animate">
      <Content />
      <div class="mt-24">
        <PostNavigation prevPost={prevProject} nextPost={nextProject} collection="projects" />
      </div>
    </article>
  </Container>
</Layout>
